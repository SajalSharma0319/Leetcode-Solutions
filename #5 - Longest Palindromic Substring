# **************************O(n2)************************
class Solution:
    def longestPalindrome(self, s: str) -> str:
        res = ""
        res_len = 0
        for i in range (len(s)):
            # Odd Length
            l, r = i, i
            while l>=0 and r<(len(s)) and s[l]==s[r]:
                if(r-l+1 > res_len):
                    res_len = r-l+1
                    res= s[l:r+1]
                l -= 1
                r += 1
            
            # even Length
            l, r = i, i+1
            while l>=0 and r<(len(s)) and s[l]==s[r]:
                if(r-l+1 > res_len):
                    res_len = r-l+1
                    res= s[l:r+1]
                l -= 1
                r += 1
        return res
                
#*************************DP:Dynamic Programming*******************
class Solution:
    def longestPalindrome(self, s: str) -> str:
        arr = [[0 for i in range(len(s))] for j in range (len(s))]
        res=""
        res_len=0
        for g in range(len(s)):
            i=0
            for j in range(g,len(s)):
                if(g==0):
                    arr[i][j]=1 
                elif(g==1):
                    if s[i]==s[j]:
                        arr[i][j]=1
                else:
                    if(s[i]==s[j] and arr[i+1][j-1]==1):
                        arr[i][j]=1              
                if arr[i][j]==1:
                    if(res_len<j-i+1):
                        res_len=j-i+1
                        res=s[i:j+1]
                                   
                i+=1
        return res
 
 
